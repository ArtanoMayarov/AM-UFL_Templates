{1,
{5,
{"АУФ",1,0,"",""},
{6,
{"Кодогенератор для API",1,0,"",""},
{0,
{"Движения.Списание.МодульДокумента",0,0,"[Движения]Документ","// Формирование движений по регистру <?""ИмяРН"", РегистрНакопления>
// Пример использования:
// Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
// КонецПроцедуры
//
// Параметры
//  
//  пДокОбъект  - Документ.Объект - Документ по которому формируются движения
//  пРежимПроведения  - РежимПроведенияДокумента - стандартное перечисление (Оперативный,Неоперативный)
//  пОтказ  - Булево - Используется для фиксация факта ошибки при формировании движений
//                 Если истина, то стандартный обработчик выбросит исключение и не проведёт документ
//
Процедура Движения_<?""ИмяРН"", РегистрНакопления>(пДокОбъект, пРежимПроведения, пОтказ)
	
	ТабСписания = пДокОбъект.<?""Имя табличной части"">.Выгрузить();
	ИмяРег = Метаданные.РегистрыНакопления.<?""ИмяРН"", РегистрНакопления>.Имя;
	ЗаполнитьДвижения = Истина;
	
	ДвижениеПоРегистрам.СписаниеОстатковРН(пДокОбъект, ИмяРег, ТабСписания, пРежимПроведения, ЗаполнитьДвижения, пОтказ);
	
КонецПроцедуры


"}
},
{0,
{"Движения.Списание.МодульДокумента.ПримерИспользования",0,0,"[Движения]Документ","Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
	
КонецПроцедуры


// Формирование движений по регистру <?""ИмяРН"", РегистрНакопления>
// Пример использования:
// Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
// КонецПроцедуры
//
// Параметры
//  
//  пДокОбъект  - Документ.Объект - Документ по которому формируются движения
//  пРежимПроведения  - РежимПроведенияДокумента - стандартное перечисление (Оперативный,Неоперативный)
//  пОтказ  - Булево - Используется для фиксация факта ошибки при формировании движений
//                 Если истина, то стандартный обработчик выбросит исключение и не проведёт документ
//
Процедура Движения_<?""ИмяРН"", РегистрНакопления>(пДокОбъект, пРежимПроведения, пОтказ)
	
	ТабСписания = пДокОбъект.<?""Имя табличной части"">.Выгрузить();
	ИмяРег = Метаданные.РегистрыНакопления.<?""ИмяРН"", РегистрНакопления>.Имя;
	ЗаполнитьДвижения = Истина;
	
	ДвижениеПоРегистрам.СписаниеОстатковРН(пДокОбъект, ИмяРег, ТабСписания, пРежимПроведения, ЗаполнитьДвижения, пОтказ);
	
КонецПроцедуры


"}
},
{0,
{"Движения.МодульМенеджераРегистра.API",0,0,"[Движения]РегистрНакопления","#Область АУФ_ВнешнийИнтерфейс

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// АУФ.ВНЕШНИЙ ИНТЕРФЕЙС /////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///// Код в этом разделе не рекомендуется модифицировать
///////////////////////////////////////////////////////////////////////////////////////////////


// Получение таблицы остатков на переданную дату
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пДата  - Дата,МоментВремени,Граница - Дата на которую запрашиваются остатки
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ОстаткиНаДату(пДата, пОтбор = Неопределено, пУсловияОтбора = Неопределено, пИменаПолей = Неопределено) Экспорт
	
	ТабОстатки = ТаблицаОстатковПереопределяемый(пДата, пОтбор, пУсловияОтбора);
	
	Возврат ТабОстатки;
	
КонецФункции

// Получение таблицы остатков на текущий момент
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ОстаткиТекущие(пОтбор = Неопределено, пУсловияОтбора = Неопределено, пИменаПолей = Неопределено) Экспорт
	
	ТабОстатки = ТаблицаОстатковПереопределяемый(Неопределено, пОтбор, пУсловияОтбора);
	
	Возврат ТабОстатки;
	
КонецФункции

// Формирование АУФ-совместимого отбора по переданной таблице
// Для каждого регистра состав полей настраивается индивидуально
//
// Параметры
//  
//  пДанныеШапки  - Произвольный - Реквизиты шапки документа или иной источник для отбора по измерениям
//  пТаблица  - ТаблицаЗначений - Таблица служащая источником значений для формирования фильтра
//  пДопРеквизиты  - Строка,Массив,Структура,Соответствие - Дополнительные данные отбора не являющиеся измерениями регистра
//                 Для коллекций типа Структура и Соответствие предполагается хранение имени реквизита в ключе
//                 
// Возвращаемое значение:
//   Структура   - Структура(Отбор,УсловияОтбора)
//
Функция ФильтрПоИзмерениям(пДанныеШапки = Неопределено, пТаблица = Неопределено, пДопРеквизиты = Неопределено) Экспорт
	
	Результат = ФильтрПоИзмерениямПереопределяемый(пДанныеШапки, пТаблица, пДопРеквизиты);
	
	Возврат Результат;

КонецФункции

// Формирование таблицы движений для списания
//
// Параметры
//  
//  пТабСписания  - ТаблицаЗначений - таблица содержащая записи которые необходимо списать (потребности)
//                 Структура таблицы должна соответствовать структуре регистра
//                 и структуре таблицы остатков минимально как подмножество
//  ТабОстатков  - ТаблицаЗначений - таблица остатков по регистру
//                 Структура таблицы должна соответствовать и структуре регистра как минимум как подмножество
//                 и структуре таблицы списания как надмножество
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то движения сформировать не удалось
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Результат подбора остатков - таблица движений с набором колонок из таблицы остатков.
//
Функция ДвиженияСписание(пТабСписания, пТабОстатков, пОтказ) Экспорт
	
	ТабДвижений = ДвиженияСписаниеПереопределяемый(пОтказ, пТабОстатков, пТабСписания);
	
	Возврат ТабДвижений;
	
КонецФункции

// Формирование таблицы движений для списания
//
// Параметры
//  
//  пТабПоступления  - ТаблицаЗначений - таблица содержащая записи которые необходимо оприходовать
//                 Структура таблицы должна соответствовать структуре регистра
//  ТабОстатков  - ТаблицаЗначений - таблица остатков по регистру
//                 Структура таблицы должна соответствовать и структуре регистра как минимум как подмножество
//                 и структуре таблицы списания как надмножество
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то движения сформировать не удалось
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица движений поступления.
//
Функция ДвиженияПоступление(пТабПоступления, пОтказ) Экспорт
	
	Возврат ДвиженияПоступлениеПереопределяемый(пТабПоступления, пОтказ);
	
КонецФункции

// Подбор остатков по таблице остатков и таблице потребностей
//  
// Параметры
//  
//  пТаблицаСписания  - ТаблицаЗначений - содержит информацию о потребных к списанию остатках.
//                 По-умолчанию, в таблицу списания добавляются служебные поля [ИмяРесурса]НеПодобрано (число) и ""ПотребностьЗакрыта"" (булево)
//  пТаблицаОстатков  - ТаблицаЗначений - остатки, которые предполагается списывать.
//                 Структура таблицы будет использована для создания таблицы движений
//                 Таблица остатков ""портится"" - её ресурсы уменьшаются на сумму подобранных
//  пПоляПоиска  - Строка,Массив,Структура,Соответствие - список имен полей, по набору которых будет производиться поиск доступной партии
//                 Набор имен полей должен соответствовать набору полей в таблицах списания и остатков
//                 Для коллекций типа Структура и Соответствие предполагается хранение имени реквизита в ключе
//  пОстановкаПриОшибке  - Булево - Если истина, то при первой же ошибке подбор будет остановлен иначе, при нехватке остатка подбор не прекратится 
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то остатки подобраны не полностью
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Результат подбора остатков - таблица движений с набором колонок из таблицы остатков.
//
Функция ПодобратьОстатки(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке = Ложь, пОтказ = Ложь) Экспорт
	
	ТабДвижений = ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке, пОтказ);
	
	Возврат ТабДвижений;
	
КонецФункции

#КонецОбласти


#Область АУФ_ПереопределяемыйИнтерфейс
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// АУФ.ПЕРЕОПРЕДЕЛЯЕМЫЙ ИНТЕРФЕЙС /////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///// Код в этом разделе может быть быть переопределен, но т.к. он является частью API
///// то форматы входных и выходных данных не должны меняться
///////////////////////////////////////////////////////////////////////////////////////////////


Функция ФильтрПоИзмерениямПереопределяемый(пДанныеШапки, пТаблица, пДопРеквизиты)
	
	Перем Фильтр;
	АУФ = УниверсальныеФункции;
	
	Фильтр = АУФ.ФильтрПоРеквизитамОбъектаБД(Метаданные(), пДанныеШапки, ""Измерения"", Фильтр);
	Фильтр = АУФ.ФильтрПоРеквизитамОбъектаБД(Метаданные(), пТаблица, ""Измерения"", Фильтр);
	
	Фильтр = АУФ.ФильтрПоРеквизитамОбъекта(пДопРеквизиты, пДанныеШапки, Фильтр);
	Фильтр = АУФ.ФильтрПоРеквизитамОбъекта(пДопРеквизиты, пТаблица, Фильтр);
	
	Возврат Фильтр;

КонецФункции

Функция ДвиженияСписаниеПереопределяемый(пОтказ, пТабОстатков, пТабСписания)
	
	ПоляПоиска = ПоляПоискаОстатковПереопределяемый(); 
	
	ТабДвижений = ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, ПоляПоиска, , пОтказ);
	
	Возврат ТабДвижений;

КонецФункции

Функция ДвиженияПоступлениеПереопределяемый(пТабПоступления, пОтказ)
	
	Возврат пТабПоступления;

КонецФункции

Функция ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке = Ложь, пОтказ = Ложь)
	
	МастерПодбора = МастерскаяАПИ.МастерПодбораРесурсов(Метаданные(), , пОстановкаПриОшибке);
	МастерПодбора.ДобавитьРесурс_СписаниеПрямое(""Количество"");
	МастерПодбора.ДобавитьРесурс_СписаниеПропорциональноПоСтроке(""Сумма"");
	МастерПодбора.ИспользоватьИсключения(); 
	МастерПодбора.ИспользоватьСообщения(Ложь);
	
	ТабДвижений = МастерПодбора.ПодобратьОстатки(пТабСписания, пТабОстатков, пПоляПоиска, пОтказ);
	
	Возврат ТабДвижений;

КонецФункции

Функция ПоляПоискаОстатковПереопределяемый()
	
	//Как правило, это одно или несколько измерений регистра по которым производится собственно подбор
	ПоляПоиска = ""<?""Поля поиска при подборе остатков (через запятую)"">""; //ИзШаблона ""Поля поиска при подборе остатков (через запятую)""
	
	Возврат ПоляПоиска;

КонецФункции

// Получение простой таблицы остатков
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пДата  - Дата,МоментВремени,Граница - Дата на которую запрашиваются остатки
//                 Если не задано, то остатки формируются на последние рассчитанные итоги
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ТаблицаОстатковПереопределяемый(пДата, пОтбор, пУсловияОтбора, пИменаПолей)
	
	МетаРег = Метаданные();
	
	ЗапросОстатков = ЗапросОстатковПоРегиструПереопределяемый(пДата, пОтбор, пУсловияОтбора, пИменаПолей);
	ТабОстатки = ЗапросОстатков.Выгрузить();
	
	// Если запрос свой, а не универсальный, то эту функцию можно не вызывать
	АУФ = УниверсальныеФункции;
	АУФ.УбратьТипАгрегатаИзИмениРесурсов(ТабОстатки, ""Остаток"", МетаРег);
	
	Возврат ТабОстатки;

КонецФункции

Функция ЗапросОстатковПоРегиструПереопределяемый(пДатаОстатков, пОтбор, пУсловияОтбора, пИменаПолей)
	
	АУФ = УниверсальныеФункции;
	МетаРег = Метаданные();
	
	РезультатЗапроса = АУФ.ОстаткиРН(МетаРег.Имя, пДатаОстатков, пОтбор, пУсловияОтбора, пИменаПолей);
	
	Если Ложь Тогда //Пример переопределения функции	
		ТекстЗапроса = ТекстЗапросаОстатковПереопределяемый();
		Если пДатаОстатков = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""&ДатаОстатков"", """");
		КонецЕсли;
		// Отказ от универсального запроса остатков подразумевает создание сложного запроса
		// Поэтому автозаполнение отключается
		// При разработке запроса не забываем настраивать опции построителя: поля и условия, в т.ч. условия виртуальных таблиц
		Автозаполнение = Ложь; 
		Запрос = АУФ.НовыйЗапрос(ТекстЗапроса, пОтбор, пУсловияОтбора, Автозаполнение);
		МВТ = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр(""ДатаОстатков"", пДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = МВТ;
		
		РезультатЗапроса = Запрос.Выполнить();
		МВТ.Закрыть();
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстатковПереопределяемый()
	
	// При разработке запроса не забываем настраивать параметры построителя:
	// поля и условия, в т.ч. условия виртуальных таблиц
	// Для даты остатков используйте параметр &ДатаОстатков	
	
	
КонецФункции

// Реализация недостающего метода контекста, аналогичного контексту объекта или ссылки
//
// Параметры
//  нет передаваемых параметров
//
Функция Метаданные()
	
	Возврат Метаданные.РегистрыНакопления.<?""Выберите регистр"", РегистрНакопления>; //ИзШаблона ""Выберите регистр""
	
КонецФункции

#КонецОбласти"}
},
{0,
{"Отчет.Модуль объекта (Прокси-запрос)",0,0,"Отчет[Модуль]","
#Область ПрограммныйИнтерфейс

// Получение результата выполнения запроса с учетом переданных параметров
//
// Параметры
//  
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//                 если по логике запроса предусмотрено использование отбора по периоду, то необходимо указать его
//                 Дата1 и Дата2 для периодов и Дата2 для срезов на указанную дату.
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//  пКонтейнер		- Строка - описание типа возвращаемого значения. Допустимые значения ""РезультатЗапроса"" и ""ТаблицаЗначений"".
//
// Возвращаемое значение:
//   РезультатЗапроса,ТаблицаЗначений - результат выполнения запроса
//
Функция РезультатОтчета(пОтбор = Неопределено, пУсловияОтбора = Неопределено, пКонтейнер = ""РезультатЗапроса"") Экспорт
	
	Настройки = НастройкиЗапроса(пОтбор, пУсловияОтбора);
	
	ШифрМодуля = Метаданные.ОбщиеМодули.ОбщиеЗапросы_ауф.ПолноеИмя();
	МенеджерОбщихЗапросов = ЗаменяемыйКод_ауф.ОбъектНаВыполнение(ШифрМодуля, ОбщиеЗапросы_ауф); 
	
	Результат = МенеджерОбщихЗапросов.Сформировать(Настройки, пКонтейнер);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции	

// Формирование параметров для последующей передачи в компоновщик
//
// Параметры
//  
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   Структура - Содержит список полей в свойстве ""Поля"" и отбор с условиями отбора в соответствующих свойствах
//
Функция НастройкиЗапроса(пОтбор = Неопределено, пУсловияОтбора = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить(""ИмяЗапроса"", ""ПремииНФО""); // Будет использоваться для определения того какой прокси-запрос использовать
	Результат.Вставить(""Поля"", Новый Структура); // поля которые должны быть в итоговой выборке
	Результат.Вставить(""Параметры"", Новый Структура); //Фиксированные параметры. Оставлено для совместимости. Установка перенесена в прокси-запросы
	Результат.Вставить(""Отбор"", Новый Структура); // отбор, где ключ имя поля, а значение это значение отбора
	Результат.Вставить(""УсловияОтбора"", Новый Структура); // для описания отборов сложнее чем ВидСравнения.Равно
	
	//Результат.Поля.Вставить(""ИмяПоляКотороеНужноПолучитьВИтоговойВыборке"");
	
	
	Фильтры = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
	#Область DevOnlyПолучениеКонтекста
	#Если Сервер и Не Сервер Тогда
		
		Фильтры = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
		
	#КонецЕсли
	#КонецОбласти
	
	//Пример отбора
	//Фильтры.Добавить(""Номенклатура"", ""ВСписке"", ""СписокНоменклатуры""); 
	//Фильтры.Добавить(""СтраховойПродукт"",		 ""НеРавно"", Справочники.СтраховыеПродукты.НайтиПоКоду(""00000000000000000015""));
	//Фильтры.Добавить(""ПремияСуммаОборот"",		 ""НеРавно"", 0);
	//ЗаполнитьЗначенияСвойств(Результат, Фильтры.ПолучитьАУФ());
		
	Возврат Результат;
	
КонецФункции


#КонецОбласти"}
},
{0,
{"Отчет.Модуль формы",0,0,"Отчет[Форма]","#Область ОбработчикиСобытийЭлементовФормы	

Процедура КаталогСохраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог для сохранения файлов отчета"";
	ДиалогОткрытияФайла.Каталог = """";
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЭтаФорма.КаталогСохранения = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы	

Процедура ПриОткрытии()
	
	ЭтаФорма.Заголовок = ЗаменяемыйКод_ауф.ПредставлениеОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ВыбПериодНажатие(Элемент)

	РаботаСДиалогами.ОбработчикНастройкаПериодаНажатие(НачПериода, КонПериода);
	
КонецПроцедуры


#КонецОбласти




#Область СлужебныеПроцедурыИФункции	

Процедура СформироватьОтчет()
	
	ОтметитьВеху(""Запрос БД"");
	ПолеРазбивка = """"; // использовать для разделения итогового результата по разным файлам
	СводнаяТаблица = СводнаяТаблицаРезультат(ПолеРазбивка);
	ВывестиРезультатНаФорму(СводнаяТаблица);
	
	ОтметитьВеху(""Компоновка результата. Записей в файл:"" + СводнаяТаблица.Количество());
	
	ПолноеИмяФайла = ИмяФайлаРезультата();
	
	СформироватьИЗаписатьФайл(СводнаяТаблица, ПолноеИмяФайла);
	
	ОтметитьВеху(""Отчет сформирован. Файлы записаны."");

КонецПроцедуры

Функция СводнаяТаблицаРезультат(пИндексы = """")
	
	Отбор = Новый Структура;
	Отбор.Вставить(""Дата1"", НачПериода);
	Отбор.Вставить(""Дата2"", КонецДня(КонПериода));
	Результат = РезультатОтчета(Отбор,, ""ТаблицаЗначений"");
	
	Если ЗначениеЗаполнено(пИндексы) Тогда
		Результат.Индексы.Добавить(пИндексы);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СформироватьИЗаписатьФайл(пТаблица, пИмяФайла)
	
	//Фильтры = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
	//Фильтры.Добавить(""ИмяПоляТаблицыПоКоторомуОтбор"", ""НеРавно"", ЗначениеОтбора);
	//ПараметрыКомпоновщика = Фильтры.ПолучитьАУФ();
	
	Макеты = Новый Структура;
	//Макеты.Вставить(""МакетОформления"", ПолучитьМакетОформления(СтандартноеОформление.Интерфейс));
	//Макеты.Вставить(""МакетЗаголовкаОтчета"", ПолучитьМакет(""ЗаголовокОтчета""));
	//Макеты.Вставить(""МакетШапкиТаблицы"", ПолучитьМакет(""ШапкаТаблицы""));
	//Макеты.Вставить(""МакетДетальныхЗаписей"", ПолучитьМакет(""СтрокаТаблицы""));
	//Макеты.Вставить(""МакетПодвалаТаблицы"", ПолучитьМакет(""ПодвалТаблицы""));
	//Макеты.Вставить(""МакетОбщихИтогов"", ПолучитьМакет(""ОбщиеИтоги""));
	//Макеты.Вставить(""МакетПодвалаОтчета"", ПолучитьМакет(""ПодвалОтчета""));
	
	ФорматДаты = ""ДФ=dd.MM.yyyy"";
	ПредставлениеПериодаОтчета = Формат(НачПериода, ФорматДаты) + "" - "" + Формат(КонПериода, ФорматДаты); 
	ПараметрыМакетов = Новый Структура(""ПериодОтчета"", ПредставлениеПериодаОтчета);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(""ИмяФайла"", пИмяФайла);
	ПараметрыЗаписи.Вставить(""Отбор"", ПараметрыКомпоновщика.Отбор);
	ПараметрыЗаписи.Вставить(""УсловияОтбора"", ПараметрыКомпоновщика.УсловияОтбора);
	ПараметрыЗаписи.Вставить(""Макеты"", Макеты);
	ПараметрыЗаписи.Вставить(""ПараметрыМакетов"", ПараметрыМакетов);
	
	ОбщегоНазначения_ауф.ТаблицаЗначенийВФайл(пТаблица, ПараметрыЗаписи); 
	
КонецФункции

Процедура ВывестиРезультатНаФорму(пТаблица)
	
	ТабРезультат = пТаблица;
	ЭлементыФормы.ТабРезультат.СоздатьКолонки();

КонецПроцедуры

Функция ИмяФайлаРезультата()
	
	ИмяФайла = ЭтаФорма.Заголовок + ""_"" + Формат(КонПериода,""ДФ=yyyy"");
	ИмяФайла = ОбщегоНазначения_ауф.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	Результат = КаталогСохранения + ""\"" + ИмяФайла + "".""<?""Расширение файла"", ВыборВарианта, ""MS Excel 2007+"", ""xlsx"", ""MS Word 2007+"", ""docx"", ""HTML"", ""html"", ""MXL"", ""mxl"", ""OpenOffice table"", ""ods"", ""PDF"", ""pdf"", ""MS Excel 97"", ""xls"">"""";
	
	Возврат Результат;

КонецФункции

Процедура ОтметитьВеху(пСобытие)
	
	Сообщать = Истина;
	ВывестиВремя = Истина;
	
	ИнтерактивнаяРабота_ауф.ВывестиСостояние(ЭтаФорма.Заголовок + ""."" + пСобытие, Сообщать, ВывестиВремя);

КонецПроцедуры




#КонецОбласти"}
},
{0,
{"Записать таблицу значений в файл",0,0,"Записать[ТаблицуЗначенийВФайл]","	
	// Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
	Фильтры = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
	//Фильтры.Добавить(""СуммаОборот"", ""Больше"", 0);
	//Фильтры.Добавить(Договор, ""Равно"", ДоговорСсылка, Неопределено); 
	ОтборыКомпоновщика = Фильтры.ПолучитьАУФ();
	
	// Макеты
	Макеты = Новый Структура;
	//Макеты.Вставить(""МакетОформления"", СтандартноеОформление.Интерфейс);
	//Макеты.Вставить(""МакетЗаголовкаОтчета"", ПолучитьМакет(""ЗаголовокОтчета""));
	//Макеты.Вставить(""МакетШапкиТаблицы"", ПолучитьМакет(""ШапкаТаблицы""));
	//Макеты.Вставить(""МакетДетальныхЗаписей"", ПолучитьМакет(""СтрокаТаблицы""));
	//Макеты.Вставить(""МакетПодвалаТаблицы"", ПолучитьМакет(""ПодвалТаблицы""));
	//Макеты.Вставить(""МакетОбщихИтогов"", ПолучитьМакет(""ОбщиеИтоги""));
	//Макеты.Вставить(""МакетПодвалаОтчета"", ПолучитьМакет(""ПодвалОтчета""));
	
	// Параметры макетов
	//ФорматДаты = ""ДФ=dd.MM.yyyy"";
	//ПредставлениеПериодаОтчета = Формат(НачПериода, ФорматДаты) + "" - "" + Формат(КонПериода, ФорматДаты); 
	ПараметрыМакетов = Новый Структура;
	//ПараметрыМакетов.Вставить(""ПериодОтчета"", ПредставлениеПериодаОтчета);
	
	// Компоновка параметров для записи файла
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(""ИмяФайла"", ПолноеИмяФайла);
	ПараметрыЗаписи.Вставить(""Отбор"", ОтборыКомпоновщика.Отбор); //Структура, где ключ это имя поля, а значение отбор
	ПараметрыЗаписи.Вставить(""УсловияОтбора"", ОтборыКомпоновщика.УсловияОтбора);//Виды сравнения для отборов с видом сравнения отличным от ВидСравнения.равно
	ПараметрыЗаписи.Вставить(""Макеты"", Макеты);//Структура, где ключ имя предопределенного макета построителя, а значение табличный документ
	ПараметрыЗаписи.Вставить(""ПараметрыМакетов"", ПараметрыМакетов); //Параметры заполнения для макетов где это предусмотрено (вид заполнения Параметр или Шаблон)
	
	ФайлЗаписан = ОбщегоНазначения_ауф.ТаблицаЗначенийВФайл(пТаблица, ПараметрыЗаписи);"}
}
},
{7,
{"Конструкторы",1,0,"",""},
{0,
{"Новый документ с заполнением",0,0,"Новый[Документ]","<?""Имя новой переменной""> = Объекты_ауф.НовыйДокумент(Документы.<?"""", Документ>, <?""Имя переменной данных заполнения"">, <?"""", ВыборВарианта, ""Не копирование"", ""Ложь"", ""Это копирование"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.ДокументОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>

"}
},
{0,
{"Новый справочник с заполнением",0,0,"Новый[Справочник]","<?""Имя новой переменной""> = Объекты_ауф.НовыйСправочник(Справочники.<?"""", Справочник>, <?""Имя переменной данных заполнения"">, <?""Это группа?"", ВыборВарианта, ""Элемент"", ""Ложь"", ""Группа"", ""Истина"">, <?"""", ВыборВарианта, ""Не копирование"", ""Ложь"", ""Это копирование"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.СправочникОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Документ-объект по ссылке",0,0,"Получить[ДокОбъект]","<?""Имя новой переменной""> = Объекты_ауф.СправочникОбъект(<?""Имя переменной со ссылкой"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.СправочникОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Справочник-объект по ссылке",0,0,"Получить[СпрОбъект]","<?""Имя новой переменной""> = Объекты_ауф.ДокументОбъект(<?""Имя переменной со ссылкой"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.ДокументОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Параметры запроса",0,0,"Параметры[Запроса]","<?""Имя новой переменной""> = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"МастерПодбораРесурсов",0,0,"Мастер[ПР]","<?""Имя новой переменной""> = МастерскаяАПИ_ауф.МастерПодбораРесурсов(Неопределено, <?""Поведение при нехватке остатков"", ВыборВарианта, ""Выдать исключение"", ""Истина"", ""Продолжить выполнение"", ""Ложь"">, <?""Поведение при нехватке остатка по текущей позиции"", ВыборВарианта, ""Продолжить подбор"", ""Ложь"", ""Остановить подбор"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.УниверсальныйПодборРесурсов_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Добавить отбор АУФ (метод)",0,0,"Добавить[ОтборАУФ]","ДобавитьОтбор(""<?""Имя поля"">"", <?""Вид сравнения"", ВыборВарианта, ""Равно"", ""\""Равно\"""", ""НеРавно"", ""\""НеРавно\"""", ""ВСписке"", ""\""ВСписке\"""", ""ВСпискеПоИерархии"", ""\""ВСпискеПоИерархии\"""", ""ВИерархии"", ""\""ВИерархии\"""", ""Больше"", ""\""Больше\"""", ""БольшеИлиРавно"", ""\""БольшеИлиРавно\"""", ""Меньше"", ""\""МеньшеИлиРавно\"""", ""Интервал"", ""\""Интервал\"""", ""ИнтервалВключаяГраницы"", ""\""ИнтервалВключаяГраницы\"""", ""ИнтервалВключаяНачало"", ""\""ИнтервалВключаяНачало\"""", ""ИнтервалВключаяОкончание"", ""\""ИнтервалВключаяОкончание\"""", ""Содержит"", ""\""Содержит\"""", ""НеСодержит"", ""\""НеСодержит\"""">, <?""Значение1 отбора или имя переменной""><?>);"}
}
},
{2,
{"Комментирование участков модуля",1,0,"",""},
{0,
{"Получение контекста",0,0,"Конт[екст]","#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	<?>
#КонецЕсли
#КонецОбласти"}
},
{0,
{"Общий модуль",0,0,"туду","// COMMON. <?"""", ДатаВремя, ""ДЛФ=Д""> <?""ИмяПользователяСокр"", ИмяПользователя> Возможно, стоит вынести в общий модуль."}
}
},
{2,
{"ПовторноеИспользование",1,0,"",""},
{10,
{"Запросы",1,0,"",""},
{0,
{"Найти документ",0,0,"Найти[Документ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//МастерФильтров.Добавить(""Проведен"", ""Равно"", Истина);

МетаОбъект = Метаданные.Документы.<?""Выберите тип объекта"", Документ>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.ДокументНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Найти справочник",0,0,"Найти[Справочник]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.Справочники.<?""Выберите тип объекта"", Справочник>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.СправочникНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Найти ПВХ",0,0,"Найти[ПВХ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.ПланыВидовХарактеристик.<?""Выберите тип объекта"", ПланВидовХарактеристик>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.ПВХНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Запрос документов",0,0,"Запрос[Документов]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//МастерФильтров.Добавить(""Проведен"", ""Равно"", Истина);

МетаОбъект = Метаданные.Документы.<?""Выберите тип объекта"", Документ>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Дата,Ссылка""; 

РезультатЗапроса = Объекты_ауф.ДокументЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Запрос справочников",0,0,"Запрос[Справочников]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.Справочники.<?""Выберите тип объекта"", Справочник>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Код,Наименование,ПометкаУдаления""; 

РезультатЗапроса = Объекты_ауф.СправочникЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Запрос ПВХ",0,0,"Запрос[ПВХ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.ПланыВидовХарактеристик.<?""Выберите тип объекта"", ПланВидовХарактеристик>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Код,Наименование,ПометкаУдаления""; 

РезультатЗапроса = Объекты_ауф.ПВХЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Произвольный запрос",0,0,"Запрос[Произвольный]","АУФ = ОбщегоНазначения_ауф;
ПараметрыЗапроса = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	ПараметрыЗапроса = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//ПараметрыЗапроса.ДобавитьОтбор(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//ПараметрыЗапроса.ДобавитьОтбор(""Проведен"", ""Равно"", Истина);


ПараметрыЗапросаАУФ = ПараметрыЗапроса.ПолучитьАУФ();
ТекстЗапроса = ТекстЗапроса<?""Имя запроса"">();

Запрос = АУФ.НовыйЗапрос(ТекстЗапроса, ПараметрыЗапросаАУФ, Истина);

Функция ТекстЗапроса<?""Имя запроса"">()
	
	// При разработке запроса не забываем настраивать параметры построителя:
	// таблицы, поля и условия, в т.ч. условия виртуальных таблиц
	// Для даты остатков используйте параметр &ДатаОстатков
	
	Возврат
	""""
	;
	
КонецФункции"}
},
{0,
{"Остатки регистра накопления",0,0,"Остатки[РН]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.КонструкторПараметровЗапроса_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
ДатаОстатков = Неопределено; //Если не задано, то будут взяты последние остатки
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыНакопления.<?""Регистр остатков"", РегистрНакопления>;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.ОстаткиРН(МетаРег, ДатаОстатков, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Срез регистра сведений",0,0,"Срез[РС]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.АПИ_ДокументОбъект.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
ДатаСреза = Неопределено; //Если не задано, то будут взяты последние остатки
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыСведений.<?""Выберите регистр"", РегистрСведений>;
ЭтоСрезПоследних = <?""Вид среза"", ВыборВарианта, ""Срез последних"", ""Истина"", ""Срез первых"", ""Ложь"">;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.СрезРС(МетаРег, ДатаОстатков, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки, ЭтоСрезПоследних);"}
},
{0,
{"Обороты регистра накопления",0,0,"Обороты[РН]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторПараметровЗапроса();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.АПИ_ДокументОбъект.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
НачалоПериода = Неопределено; //Если не задано, то обороты будут взяты с самой первой записи
КонецПериода = Неопределено; //Если не задано, то будут обороты будут взяты вплоть до последней записи
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыНакопления.<?""Регистр остатков"", РегистрНакопления>;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.ОборотыРН(МетаРег, НачалоПериода, КонецПериода, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
}
},
{1,
{"МодулиОбъекты",1,0,"",""},
{0,
{"ПолучитьОтчет",0,0,"Отчет[Получить]","#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	Если Ложь Тогда <?""Имя переменной результата""> = Обработки.КонструкторПараметровЗапроса_ауф.Создать() КонецЕсли;
	
#КонецЕсли
#КонецОбласти


<?""Имя переменной результата""> = ЗаменяемыйКод_ауф.ПолучитьОтчет(Метаданные.Отчеты.<?"""", Отчет>);"}
}
}
},
{2,
{"ЗаменяемыйКод",1,0,"",""},
{0,
{"Заменить общий модуль",0,0,"Заменить[модуль]","ШифрМодуля = Метаданные.ОбщиеМодули.<?""Выберите заменяемый объект"", ОбъектМетаданных, ""ОбщийМодуль"">.ПолноеИмя();
Модуль = ЗаменяемыйКод_ауф.ОбъектНаВыполнение(ШифрМодуля, <?""Выберите заменяемый объект"", ОбъектМетаданных, ""ОбщийМодуль"">);
"}
},
{0,
{"Служебный программный интерфейс",0,0,"Заменить[СПИ]","#Область СлужебныйПрограммныйИнтерфейс

Функция ВерсияОбъекта() Экспорт
	
	Возврат ""0.001"";
	
КонецФункции

Функция ИдентификаторОбъекта() Экспорт
	
	Возврат Метаданные.ИМЯ_КОЛЛЕКЦИИ.ИМЯ_ОБЪЕКТА.ПолноеИмя();
	
КонецФункции

#КонецОбласти"}
}
}
}
}